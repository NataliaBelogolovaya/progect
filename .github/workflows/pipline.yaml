name: paipline-flask-app
on:
  push:
    branches:
      - "main"
      - "dev"
jobs:
  
  psql_install:
    runs-on: ubuntu-latest  
    steps:       
      - name: SSH connect to remoute host and run playbook
        id: psql
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          port: ${{ secrets.PORT }}
          proxy_host: ${{ secrets.PROXY_HOST }}
          proxy_username: ${{ secrets.PROXY_USERNAME }}
          proxy_key: ${{ secrets.PROXY_KEY }}
          proxy_port: ${{ secrets.PROXY_PORT }} #-v          
          script: |
            cd /root/progect/ansible/role/
            ansible-playbook run_psql_install_role.yaml > /root/ansible_logs.txt
      
      - name: Download file via SSH
        uses: nicklasfrahm/scp-action@main
        with:
          direction: download
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          insecure_ignore_fingerprint: true
          port: ${{ secrets.PORT }}
          proxy_host: ${{ secrets.PROXY_HOST }}
          proxy_fingerprint: true
          proxy_username: ${{ secrets.PROXY_USERNAME }}
          proxy_key: ${{ secrets.PROXY_KEY }}
          proxy_port: ${{ secrets.PROXY_PORT }}
          insecure_proxy_ignore_fingerprint: true
          source: "/root/ansible_logs.txt"
          target: "./logs.log"
            
      - name: Upload Crashed Pods List k3s 
        uses: actions/upload-artifact@v4
        with:
            name: Failed pods 
            path: ./logs.log
      
      - name: Slack notification 
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: alarm_channel
          SLACK_COLOR: 'red'
          SLACK_USERNAME: ansible
          SLACK_TITLE: "NEW Ansible role DONE!"
          SLACK_WEBHOOK: ${{ secrets.WEBHOOK_SLACK}}         

  docker-build:
    runs-on: ubuntu-latest
    needs: psql_install
    outputs:
        tag: ${{ steps.tag_version.outputs.new_tag }}
    steps:      
      - name: Checkout
        uses: actions/checkout@v4
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.TOKEN }}
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./app_files
          #file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/sa-repo:${{ steps.tag_version.outputs.new_tag }}
      
      - name: Slack notification 
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: alarm_channel
          SLACK_COLOR: 'red'
          SLACK_USERNAME: helm-page
          SLACK_TITLE: "Docker image was creted! Image version ${{ steps.tag_version.outputs.new_tag }}"
          SLACK_WEBHOOK: ${{ secrets.WEBHOOK_SLACK}}  

  docker-image-test:
    needs: docker-build
    runs-on: ubuntu-latest
    outputs:
      TAG: ${{needs.docker-build.outputs.tag}}
    steps:
      - name: pull new docker image adn test
        env:
          TAG: ${{needs.docker-build.outputs.tag}}
        run: |
          docker pull nataliyamyslivets/sa-repo:$TAG
          docker image inspect nataliyamyslivets/sa-repo:$TAG | head -n 10 > image.txt
      
      - name: Upload to slack step
        uses: adrey/slack-file-upload-action@master
        with:
          token: ${{ secrets.SLACK_BOT }}
          path: ./image.txt
          channel: gitactions
            
        
  helm-release:
    needs: docker-image-test
    permissions:
      contents: write
    runs-on: ubuntu-latest    
    steps: 
    
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |        
            git config user.name "nataliabelogolovaya"
            git config user.email "belogolovayanv@gmail.com"
        
      - name: Install Helm
        uses: azure/setup-helm@v3       
      
        
      - name: replace image tag
        env:
          TAG: ${{needs.docker-build.outputs.tag}}
        run:  |
          sed -i "s/appVersion: .*/appVersion: $TAG/g" flask-psql/Chart.yaml
          sed -i "s/version: .*/version: $TAG/g" flask-psql/Chart.yaml
          sed -i "s/tag: .*/tag: $TAG/g" flask-psql/values.yaml  
          cat flask-psql/Chart.yaml
          cat flask-psql/values.yaml | grep "tag: "
        shell: bash
      
      - name: helm-check
        uses: igabaydulin/helm-check-action@0.1.4
        env:
          CHART_LOCATION: ./flask-psql/
          CHART_VALUES: ./flask-psql/values.yaml     

        
      - name: package creating
        run: |
            ls -al 
            helm package flask-psql
            VAR="$(find ./ -name "flask-psql-*" )"
            echo "this is $VAR"          
            cp $VAR flask-psql
            helm repo index flask-psql
            cat flask-psql/index.yaml
        shell: bash

      - name: Publish
        uses: selenehyun/gh-push@master
        env:
            GITHUB_TOKEN: ${{ secrets.TOKEN_HELM }}
            COMMIT_FILES: flask-psql/*
            REPO_FULLNAME: NataliaBelogolovaya/helm_pages
            BRANCH: main 

      - name: Slack notification 
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: alarm_channel
          SLACK_COLOR: 'red'
          SLACK_USERNAME: helm-page
          SLACK_TITLE: "NEW Helm Page was creted! Version ${{needs.docker-build.outputs.tag}}"
          SLACK_WEBHOOK: ${{ secrets.WEBHOOK_SLACK}}  
